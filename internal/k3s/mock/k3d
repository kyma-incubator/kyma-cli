#!/bin/bash

# Mock for simulating the k3d CLI tool.
#
# Provided CLI arguments are converted to function calls.
# Example:
# ./k3d version   =>   will trigger the function 'version'
#
# Multiple arguments are concatenated by underscore (_).
# Example:
# ./k3d cluster list   =>   will trigger the function 'cluster_lister'

#
# Mock for 'version' command
#
function version {
    echo  'k3d version v3.4.0
k3s version v1.19.4-k3s1 (default)'
    return 0
}

#
# Mock for 'help' command
#
function help {
    echo 'https://k3d.io/
k3d is a wrapper CLI that helps you to easily create k3s clusters inside docker.
Nodes of a k3d cluster are docker containers running a k3s image.
All Nodes of a k3d cluster are part of the same docker network.

Usage:
  k3d [flags]
  k3d [command]

Available Commands:
  cluster     Manage cluster(s)
  completion  Generate completion scripts for [bash, zsh, fish, powershell | psh]
  help        Help about any command
  image       Handle container images.
  kubeconfig  Manage kubeconfig(s)
  node        Manage node(s)
  version     Show k3d and default k3s version

Flags:
  -h, --help      help for k3d
      --trace     Enable super verbose output (trace logging)
      --verbose   Enable verbose output (debug logging)
      --version   Show k3d and default k3s version

Use "k3d [command] --help" for more information about a command.'
}

#
# Mock for 'cluster list' command
#
function cluster_list {
    echo 'NAME           SERVERS   AGENTS   LOADBALANCER
kyma-cluster   1/1       0/0      true'
}

#
# Verify whether a mock function exists.
#
function fct_exists {
    local mockFctName=$1
    declare -f -F $mockFctName > /dev/null
    return $?
}

# Map CLI arguments to local function
IFS='_'
MOCK_FUNCTION="$*"
IFS=' '
fct_exists $MOCK_FUNCTION && $MOCK_FUNCTION || (echo "K3d mock-script doesn't include function '${MOCK_FUNCTION}'" 1>&2 && exit 1)
exit 0